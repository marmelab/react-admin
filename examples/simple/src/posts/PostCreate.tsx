import * as React from 'react';
import { useMemo } from 'react';
import { RichTextInput } from 'ra-input-rich-text';
import {
    ArrayInput,
    AutocompleteInput,
    BooleanInput,
    Create,
    DateInput,
    FileField,
    FileInput,
    FormDataConsumer,
    maxValue,
    minValue,
    NumberInput,
    required,
    ReferenceInput,
    SaveButton,
    SelectInput,
    SimpleFormConfigurable,
    SimpleFormIterator,
    TextInput,
    Toolbar,
    useNotify,
    useRedirect,
    useCreate,
    useCreateSuggestionContext,
    CanAccess,
    MutationMode,
} from 'react-admin';
import { useFormContext, useWatch } from 'react-hook-form';
import {
    Button,
    ButtonGroup,
    ClickAwayListener,
    Dialog,
    DialogActions,
    DialogContent,
    Grow,
    MenuItem,
    MenuList,
    Paper,
    Popper,
    Stack,
} from '@mui/material';
import ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';

// Client side id generation. We start from 100 to avoid querying the post list to get the next id as we
// may be offline and accessing this page directly (without going through the list page first) which would
// be possible if the app was also a PWA.
// We only do that for optimistic and undoable modes in order to not break any existing tests that expect
// the id to be generated by the server (e.g. by FakeRest).
let next_id = 100;
const getNewId = (mutationMode: MutationMode) => {
    const id = mutationMode === 'pessimistic' ? undefined : next_id++;
    return id;
};

const PostCreateToolbar = ({
    mutationMode,
    setMutationMode,
}: {
    mutationMode: MutationMode;
    setMutationMode: (mutationMode: MutationMode) => void;
}) => {
    const notify = useNotify();
    const redirect = useRedirect();
    const { reset } = useFormContext();

    return (
        <Toolbar sx={{ gap: 1 }}>
            <Stack direction="row" spacing={1} sx={{ flexGrow: 1 }}>
                <SaveButton label="post.action.save_and_edit" variant="text" />
                <SaveButton
                    label="post.action.save_and_show"
                    type="button"
                    variant="text"
                    mutationOptions={{
                        onSuccess: data => {
                            notify('resources.posts.notifications.created', {
                                type: 'info',
                                messageArgs: { smart_count: 1 },
                                undoable: mutationMode === 'undoable',
                            });
                            redirect('show', 'posts', data.id);
                        },
                    }}
                    transform={data => ({
                        ...data,
                        id: getNewId(mutationMode),
                        average_note: 10,
                    })}
                    sx={{ display: { xs: 'none', sm: 'flex' } }}
                />
                <SaveButton
                    label="post.action.save_and_add"
                    type="button"
                    variant="text"
                    mutationOptions={{
                        onSuccess: () => {
                            reset();
                            window.scrollTo(0, 0);
                            notify('resources.posts.notifications.created', {
                                type: 'info',
                                messageArgs: { smart_count: 1 },
                                undoable: mutationMode === 'undoable',
                            });
                        },
                    }}
                    transform={data => ({
                        ...data,
                        id: getNewId(mutationMode),
                        average_note: 10,
                    })}
                />
                <SaveButton
                    label="post.action.save_with_average_note"
                    type="button"
                    variant="text"
                    mutationOptions={{
                        onSuccess: data => {
                            notify('resources.posts.notifications.created', {
                                type: 'info',
                                messageArgs: { smart_count: 1 },
                                undoable: mutationMode === 'undoable',
                            });
                            redirect('show', 'posts', data.id);
                        },
                    }}
                    transform={data => ({
                        ...data,
                        id: getNewId(mutationMode),
                        average_note: 10,
                    })}
                    sx={{ display: { xs: 'none', sm: 'flex' } }}
                />
            </Stack>
            <MutationModesSelector
                mutationMode={mutationMode}
                setMutationMode={setMutationMode}
            />
        </Toolbar>
    );
};

const backlinksDefaultValue = [
    {
        date: new Date(),
        url: 'http://google.com',
    },
];

const PostCreate = () => {
    const defaultValues = useMemo(
        () => ({
            average_note: 0,
        }),
        []
    );
    const [mutationMode, setMutationMode] =
        React.useState<MutationMode>('pessimistic');
    const dateDefaultValue = useMemo(() => new Date(), []);
    return (
        <Create
            redirect="edit"
            mutationMode={mutationMode}
            transform={data => ({ ...data, id: getNewId(mutationMode) })}
        >
            <SimpleFormConfigurable
                toolbar={
                    <PostCreateToolbar
                        mutationMode={mutationMode}
                        setMutationMode={setMutationMode}
                    />
                }
                defaultValues={defaultValues}
                sx={{ maxWidth: { md: 'auto', lg: '30em' } }}
            >
                <FileInput
                    source="pdffile"
                    label="PDF-Template"
                    accept={{ 'application/pdf': ['.pdf'] }}
                >
                    <FileField source="src" title="title" />
                </FileInput>
                <TextInput
                    autoFocus
                    source="title"
                    validate={required('Required field')}
                />
                <TextInput
                    source="teaser"
                    multiline
                    validate={required('Required field')}
                />
                <RichTextInput source="body" fullWidth validate={required()} />
                <DependantInput dependency="title">
                    <NumberInput
                        source="average_note"
                        validate={[
                            minValue(0, 'Should be between 0 and 5'),
                            maxValue(5, 'Should be between 0 and 5'),
                        ]}
                    />
                </DependantInput>

                <DateInput
                    source="published_at"
                    defaultValue={dateDefaultValue}
                />
                <BooleanInput source="commentable" defaultValue />
                <ArrayInput
                    source="backlinks"
                    defaultValue={backlinksDefaultValue}
                    validate={[required()]}
                >
                    <SimpleFormIterator>
                        <DateInput source="date" defaultValue="" />
                        <TextInput source="url" defaultValue="" />
                    </SimpleFormIterator>
                </ArrayInput>
                <CanAccess action="edit" resource="posts.authors">
                    <ArrayInput source="authors">
                        <SimpleFormIterator>
                            <ReferenceInput source="user_id" reference="users">
                                <AutocompleteInput
                                    label="User"
                                    create={<CreateUser />}
                                    openOnFocus={false}
                                />
                            </ReferenceInput>
                            <FormDataConsumer>
                                {({ scopedFormData }) =>
                                    scopedFormData && scopedFormData.user_id ? (
                                        <SelectInput
                                            source="role"
                                            choices={[
                                                {
                                                    id: 'headwriter',
                                                    name: 'Head Writer',
                                                },
                                                {
                                                    id: 'proofreader',
                                                    name: 'Proof reader',
                                                },
                                                {
                                                    id: 'cowriter',
                                                    name: 'Co-Writer',
                                                },
                                            ]}
                                            label="Role"
                                        />
                                    ) : null
                                }
                            </FormDataConsumer>
                        </SimpleFormIterator>
                    </ArrayInput>
                </CanAccess>
            </SimpleFormConfigurable>
        </Create>
    );
};

export default PostCreate;

const DependantInput = ({
    dependency,
    children,
}: {
    dependency: string;
    children: JSX.Element;
}) => {
    const dependencyValue = useWatch({ name: dependency });

    return dependencyValue ? children : null;
};

const CreateUser = () => {
    const { filter, onCancel, onCreate } = useCreateSuggestionContext();
    const [value, setValue] = React.useState(filter || '');
    const [create] = useCreate();

    const handleSubmit = event => {
        event.preventDefault();
        create(
            'users',
            {
                data: {
                    name: value,
                },
            },
            {
                onSuccess: data => {
                    setValue('');
                    onCreate(data);
                },
            }
        );
    };

    return (
        <Dialog open onClose={onCancel}>
            <form onSubmit={handleSubmit}>
                <DialogContent>
                    <TextInput
                        source="name"
                        defaultValue="Slim Shady"
                        autoFocus
                        validate={[required()]}
                    />
                    <AutocompleteInput
                        source="role"
                        choices={[
                            { id: '', name: 'None' },
                            { id: 'admin', name: 'Admin' },
                            { id: 'user', name: 'User' },
                            { id: 'user_simple', name: 'UserSimple' },
                        ]}
                        validate={[required()]}
                    />
                </DialogContent>
                <DialogActions>
                    <Button type="submit">Save</Button>
                    <Button onClick={onCancel}>Cancel</Button>
                </DialogActions>
            </form>
        </Dialog>
    );
};

const MutationModes = ['pessimistic', 'optimistic', 'undoable'] as const;
const MutationModesSelector = (props: {
    mutationMode: MutationMode;
    setMutationMode: (mode: MutationMode) => void;
}) => {
    const { setMutationMode, mutationMode } = props;
    const [open, setOpen] = React.useState(false);
    const anchorRef = React.useRef<HTMLDivElement>(null);
    const buttonRef = React.useRef<HTMLButtonElement>(null);

    const handleMenuItemClick = (mutationMode: MutationMode) => {
        setOpen(false);
        setMutationMode(mutationMode);
    };

    const handleToggle = () => {
        setOpen(prevOpen => !prevOpen);
    };

    const handleClose = (event: Event) => {
        if (
            anchorRef.current &&
            anchorRef.current.contains(event.target as HTMLElement)
        ) {
            return;
        }

        setOpen(false);
    };

    return (
        <>
            <ButtonGroup
                variant="text"
                ref={anchorRef}
                aria-label="Button group with a nested menu"
            >
                <Button ref={buttonRef}>{mutationMode}</Button>
                <Button
                    size="small"
                    aria-controls={open ? 'split-button-menu' : undefined}
                    aria-expanded={open ? 'true' : undefined}
                    aria-label="select merge strategy"
                    aria-haspopup="menu"
                    onClick={handleToggle}
                >
                    <ArrowDropDownIcon />
                </Button>
            </ButtonGroup>
            <Popper
                sx={{ zIndex: 1 }}
                open={open}
                anchorEl={anchorRef.current}
                role={undefined}
                transition
                disablePortal
            >
                {({ TransitionProps, placement }) => (
                    <Grow
                        {...TransitionProps}
                        style={{
                            transformOrigin:
                                placement === 'bottom'
                                    ? 'center top'
                                    : 'center bottom',
                        }}
                    >
                        <Paper>
                            <ClickAwayListener onClickAway={handleClose}>
                                <MenuList id="split-button-menu" autoFocusItem>
                                    {MutationModes.map(mutationMode => (
                                        <MenuItem
                                            key={mutationMode}
                                            onClick={() =>
                                                handleMenuItemClick(
                                                    mutationMode
                                                )
                                            }
                                        >
                                            {mutationMode}
                                        </MenuItem>
                                    ))}
                                </MenuList>
                            </ClickAwayListener>
                        </Paper>
                    </Grow>
                )}
            </Popper>
        </>
    );
};
